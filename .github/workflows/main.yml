name: 'main'

on:
  pull_request:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_SERVICE_USER: "rajsite"
  GITHUB_SERVICE_EMAIL: "rajsite@users.noreply.github.com"

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required for changelog detection
          token: ${{ secrets.GITHUBPAGESDEPLOYTOKEN }}

      # Install dependencies
      - uses: actions/setup-node@v1
        with:
          node-version: '12'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install --global npm@7
      - run: npm ci

      # Build
      - run: npm run build
      - run: npm run pack
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: |
            packages/**/*.tgz
            angular-workspace/dist/**/*.tgz
          if-no-files-found: error

      # Lint
      - run: npm run lint

      # Test
      - run: npm run test

      # Check Changelog
      - run: npm run check

      - name: Validate no changes to tracked files
        run: |
          echo print files with changes:
          git diff-index --ignore-space-at-eol --stat HEAD
          echo exit with error if there are changes.
          git diff-index --quiet --ignore-space-at-eol --stat HEAD

      # Run Lighthouse page performance test suite
      - name: Audit Angular Example App using Lighthouse
        uses: treosh/lighthouse-ci-action@v8
        with:
          configPath: '.github/lighthouse/lighthouserc.json'
          # budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'
            const comment = [
                `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                `| ${score(result.pwa)} PWA | ${result.pwa} |`,
                ' ',
                `*Lighthouse ran on [${Object.keys(links)[0]}](${Object.keys(links)[0]})*`
            ].join('\n')
             core.setOutput("comment", comment); 
      - name: Add comment to PR
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}

      # Publish
      - name: Set Git User
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          git config --global user.name "${{ env.GITHUB_SERVICE_USER }}"
          git config --global user.email "${{ env.GITHUB_SERVICE_EMAIL }}"

      # Publish to Chromatic (from any push)
      - name: Publish to Chromatic
        if: github.event_name == 'push'
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: ./packages/nimble-components
          exitZeroOnChanges: true # Option to prevent the workflow from failing

      # Publish site to GitHub Pages (only from main)
      - name: Install ruby
        if: startsWith(github.ref, 'refs/heads/main')
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Install dependencies
        if: startsWith(github.ref, 'refs/heads/main')
        run: gem install dpl
      - name: Deploy to GitHub Pages
        if: startsWith(github.ref, 'refs/heads/main')
        run: dpl --provider=pages --repo=ni/nimble --local_dir=packages/site/dist --skip_cleanup --name="${{ env.GITHUB_SERVICE_USER }}" --email="${{ env.GITHUB_SERVICE_EMAIL }}" --github-token=${{ secrets.GITHUBPAGESDEPLOYTOKEN }}

      # Publish NPM packages (only from main)
      - name: Beachball publish
        if: startsWith(github.ref, 'refs/heads/main')
        env:
          NPM_SECRET_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run publish-ci -- -n $NPM_SECRET_TOKEN
      # Beachball doesn't update package-lock.json files when publishing.
      # See https://github.com/microsoft/beachball/issues/525#issue-901698225
      # Modified to only commit on changes: https://stackoverflow.com/a/68479810      
      - name: Lockfile update
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          echo "Latest commit before merge main"
          git log -1
          echo "Merging from main"
          git merge --ff-only origin/main
          echo "Latest commit after merge main"
          git log -1
          echo "Clearing node_modules"
          rm -rf node_modules
          echo "Updating lock file"
          npm i --package-lock-only
          git add -A
          if git diff-index --quiet HEAD;
          then
            echo "no changes found to push to main"
          else
            echo "changes found to push to main"
            git commit -m "applying package lock updates [skip ci]"
            git push --set-upstream origin main
          fi
