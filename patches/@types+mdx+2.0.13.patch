diff --git a/node_modules/@types/mdx/types.d.ts b/node_modules/@types/mdx/types.d.ts
index 498bb69..b305583 100644
--- a/node_modules/@types/mdx/types.d.ts
+++ b/node_modules/@types/mdx/types.d.ts
@@ -1,5 +1,7 @@
 // Internal helper types
 
+import React from "react";
+
 /**
  * This is the global JSX.ElementType if it’s defined, otherwise never.
  */
@@ -20,12 +22,12 @@ type ClassElementType = Extract<ElementType, new(props: Record<string, any>) =>
 /**
  * A valid JSX string component.
  */
-type StringComponent = Extract<keyof JSX.IntrinsicElements, ElementType extends never ? string : ElementType>;
+type StringComponent = Extract<keyof React.JSX.IntrinsicElements, ElementType extends never ? string : ElementType>;
 
 /**
  * A JSX element returned by MDX content.
  */
-export type Element = JSX.Element;
+export type Element = React.JSX.Element;
 
 /**
  * A valid JSX function component.
@@ -44,7 +46,7 @@ type FunctionComponent<Props> = ElementType extends never
  */
 type ClassComponent<Props> = ElementType extends never
     // If JSX.ElementType isn’t defined, the valid return type is a constructor that returns JSX.ElementClass
-    ? new(props: Props) => JSX.ElementClass
+    ? new(props: Props) => React.JSX.ElementClass
     : ClassElementType extends never
     // If JSX.ElementType is defined, but doesn’t allow constructors, function components are disallowed.
         ? never
@@ -70,7 +72,7 @@ interface NestedMDXComponents {
 export type MDXComponents =
     & NestedMDXComponents
     & {
-        [Key in StringComponent]?: Component<JSX.IntrinsicElements[Key]>;
+        [Key in StringComponent]?: Component<React.JSX.IntrinsicElements[Key]>;
     }
     & {
         /**
