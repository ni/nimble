import type * as TokensNamespace from './design-tokens';

type TokenName = keyof typeof TokensNamespace;

export const tokenNames: { readonly [key in TokenName]: string } = {
    actionColorRgbPartial: 'action-color-rgb-partial',
    applicationBackgroundColor: 'application-background-color',
    headerBackgroundColor: 'header-background-color',
    sectionBackgroundColor: 'section-background-color',
    fillColorSelected: 'fill-color-selected',
    fillColorSelectedRgbPartial: 'fill-color-selected-rgb-partial',
    fillColorSelectedHover: 'fill-color-selected-hover',
    fillColorHover: 'fill-color-hover',
    borderColor: 'border-color',
    borderColorRgbPartial: 'border-color-rgb-partial',
    failColor: 'fail-color',
    warningColor: 'warning-color',
    passColor: 'pass-color',
    borderColorHover: 'border-color-hover',
    iconColor: 'icon-color',
    popupBoxShadowColor: 'popup-box-shadow-color',
    popupBorderColor: 'popup-border-color',
    controlHeight: 'control-height',
    smallPadding: 'small-padding',
    standardPadding: 'standard-padding',
    labelHeight: 'label-height',
    borderWidth: 'border-width',
    iconSize: 'icon-size',
    groupHeaderTextTransform: 'group-header-text-transform',
    drawerWidth: 'drawer-width',
    smallDelay: 'small-delay',
    mediumDelay: 'medium-delay',
    largeDelay: 'large-delay',
    headlineLargeFont: 'headline-large-font',
    headlineRegularFont: 'headline-regular-font',
    titleXLargeFont: 'title-xlarge-font',
    titleLargeFont: 'title-large-font',
    titleRegularFont: 'title-regular-font',
    subtitleLargeFont: 'subtitle-large-font',
    subtitleRegularFont: 'subtitle-regular-font',
    linkStandardFont: 'link-standard-font',
    placeholderFont: 'placeholder-font',
    bodyEmphasizedFont: 'body-emphasized-font',
    bodyFont: 'body-font',
    groupHeaderFont: 'group-header-font',
    controlLabelFont: 'control-label-font',
    buttonLabelFont: 'button-label-font',
    tooltipCaptionFont: 'tooltip-caption-font',
    headlineLargeFontColor: 'headline-large-font-color',
    headlineRegularFontColor: 'headline-regular-color',
    titleXLargeFontColor: 'title-xlarge-color',
    titleLargeFontColor: 'title-large-color',
    titleRegularFontColor: 'title-regular-color',
    subtitleLargeFontColor: 'subtitle-large-color',
    subtitleRegularFontColor: 'subtitle-regular-color',
    linkStandardFontColor: 'link-standard-font-color',
    placeholderFontColor: 'placeholder-font-color',
    bodyEmphasizedFontColor: 'body-emphasized-font-color',
    bodyFontColor: 'body-font-color',
    groupHeaderFontColor: 'group-header-font-color',
    controlLabelFontColor: 'control-label-font-color',
    buttonLabelFontColor: 'button-label-font-color',
    tooltipCaptionFontColor: 'tooltip-caption-font-color',
    headlineLargeFontColorDisabled: 'headline-large-font-color-disabled',
    headlineRegularFontColorDisabled: 'headline-regular-color-disabled',
    titleXLargeFontColorDisabled: 'title-xlarge-color-disabled',
    titleLargeFontColorDisabled: 'title-large-color-disabled',
    titleRegularFontColorDisabled: 'title-regular-color-disabled',
    subtitleLargeFontColorDisabled: 'subtitle-large-color-disabled',
    subtitleRegularFontColorDisabled: 'subtitle-regular-color-disabled',
    linkStandardFontColorDisabled: 'link-standard-font-color-disabled',
    placeholderFontColorDisabled: 'placeholder-font-color-disabled',
    bodyEmphasizedFontColorDisabled: 'body-emphasized-font-color-disabled',
    bodyFontColorDisabled: 'body-font-color-disabled',
    groupHeaderFontColorDisabled: 'group-header-font-color-disabled',
    controlLabelFontColorDisabled: 'control-label-font-color-disabled',
    buttonLabelFontColorDisabled: 'button-label-font-color-disabled',
    tooltipCaptionFontColorDisabled: 'tooltip-caption-font-color-disabled'
};

const prefix = 'ni-nimble';

export const styleNameFromTokenName = (tokenName: string): string => `${prefix}-${tokenName}`;
export const cssPropertyFromTokenName = (tokenName: string): string => `--${prefix}-${tokenName}`;
export const scssPropertyFromTokenName = (tokenName: string): string => `$${prefix}-${tokenName}`;
export const scssInternalPropertyFromTokenName = (tokenName: string): string => `$${prefix}-internal-${tokenName}`;
export const scssInternalPropertySetterMarkdown = (
    tokenName: string,
    property: string
): string => `\`#{$${prefix}-internal-${tokenName}}: ${property};\``;
