@inherits NimbleInputBase<string?>

<CascadingValue TValue=NimbleOptionContext IsFixed=true Value=_context @key=_context>
    <nimble-listbox current-value="@CurrentValueAsString"
                    @onchange="@(EventCallback.Factory.CreateBinder<string?>(this, __value => CurrentValueAsString = __value, CurrentValueAsString))"
                    name="@Name"
                    @attributes="AdditionalAttributes">
        @ChildContent
    </nimble-listbox>
</CascadingValue>

@code {
    private readonly string _defaultSelectName = Guid.NewGuid().ToString("N");
    private NimbleOptionContext? _context;

    /// <summary>
    /// Gets or sets the name of the Select.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Gets or sets the child content to be rendering inside the <see cref="NimbleListbox"/>.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [CascadingParameter] private NimbleOptionContext? CascadedContext { get; set; }

    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        var selectName = !string.IsNullOrEmpty(Name) ? Name : _defaultSelectName;
        var fieldClass = string.Empty;
        var changeEventCallback = EventCallback.Factory.CreateBinder<string?>(this, __value => CurrentValueAsString = __value, CurrentValueAsString);
        _context = new NimbleOptionContext(CascadedContext, selectName, CurrentValue, fieldClass, changeEventCallback);
    }
    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }
}