
<%
var props = _.filter(allProperties, function(prop) {
    return prop.attributes.category === 'color';
});
%>
<%
  // for backward compatibility we need to have the user explicitly hide it
  var showFileHeader = (this.options && this.options.hasOwnProperty('showFileHeader')) ? this.options.showFileHeader : true;
  if(showFileHeader) {
      print("/**\n");
      print("    Do not edit directly\n");
      print("    Generated on " + new Date().toUTCString() + "\n");
      print("**/");
  }
%>

public static class NimbleColorTokens {

<% _.each(props, function(prop) {
%>    public static readonly Color <%= prop.name %>Color = Color.FromRgb(<%= prop.value %>);
<% }); %>

<% _.each(props, function(prop) {
%>    public static readonly SolidColorBrush <%= prop.name %>Brush = new SolidColorBrush(<%= prop.name %>Color);
<% }); %>
}