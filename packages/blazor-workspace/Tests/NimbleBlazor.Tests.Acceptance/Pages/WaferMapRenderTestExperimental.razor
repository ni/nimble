@page "/WaferMapRenderTestExperimental"
@namespace NimbleBlazor.Tests.Acceptance.Pages
@using System.Diagnostics.CodeAnalysis;
@using Apache.Arrow;
@using Apache.Arrow.Types;
@inherits LayoutComponentBase

<NimbleWaferMap @ref="_waferMap"
                OriginLocation="WaferMapOriginLocation.BottomLeft"
                Orientation="WaferMapOrientation.Bottom"
                MaxCharacters=2
                DieLabelsHidden="true"
                ColorScaleMode="WaferMapColorScaleMode.Linear"
                GridMaxX="4"
                GridMaxY="4"
                GridMinX="0"
                GridMinY="0"
                HoverDieChanged="@ShowCurrentDie"
                @bind-ColorScale="ColorScale"
                @bind-HighlightedTags="HighlightedTags">
</NimbleWaferMap>
<NimbleButton @onclick="GetValidityAsync">Get Validity Async</NimbleButton>
<NimbleTextField class="test-text-field" @bind-Value="TextFieldText"></NimbleTextField>
<NimbleTextField class="render-text-field" @bind-Value="RenderTextField"></NimbleTextField>
@code {
    public NimbleWaferMap? _waferMap;
    private string? TextFieldText { get; set; }
    private string? RenderTextField { get; set; }
    [NotNull]
    public RecordBatch? DiesTable { get; set; }
    [NotNull]
    public IEnumerable<string> HighlightedTags { get; set; } = Enumerable.Empty<string>();
    [NotNull]
    public WaferMapColorScale ColorScale { get; set; } = new WaferMapColorScale(new List<string> { "red", "green" }, new List<string> { "0", "6" });

    public WaferMapRenderTestExperimental()
    {
        UpdateDiesTable(5);
    }

    public void UpdateDiesTable(int numberOfDies)
    {
        var colIndexes = new Int32Array.Builder();
        var rowIndexes = new Int32Array.Builder();
        var values = new DoubleArray.Builder();
        int radius = (int)Math.Ceiling(Math.Sqrt(numberOfDies / Math.PI));
        var centerX = radius;
        var centerY = radius;

        for (var i = centerY - radius; i <= centerY + radius; i++)
        {
            // generate points left of centerX
            for (
                var j = centerX;
                (j - centerX) * (j - centerX) + (i - centerY) * (i - centerY)
                <= radius * radius;
                j--)
            {
                var value = (i + j) % 100;
                colIndexes.Append(i);
                rowIndexes.Append(j);
                values.Append(value);
            }
            // generate points right of centerX
            for (
                var j = centerX + 1;
                (j - centerX) * (j - centerX) + (i - centerY) * (i - centerY)
                <= radius * radius;
                j++)
            {
                var value = (i + j) % 100;
                colIndexes.Append(i);
                rowIndexes.Append(j);
                values.Append(value);
            }
        }
        var colIndexField = new Field("colIndex", new Int32Type(), false);
        var rowIndexField = new Field("rowIndex", new Int32Type(), false);
        var valueField = new Field("value", new DoubleType(), false);
        var schema = new Schema.Builder()
            .Field(colIndexField)
            .Field(rowIndexField)
            .Field(valueField)
            .Build();

        DiesTable = new RecordBatch(schema, new List<IArrowArray> {
            colIndexes.Build(),
            rowIndexes.Build(),
            values.Build()
        },
        colIndexes.Length);
    }

    public async Task GetValidityAsync()
    {
        if (_waferMap == null)
        {
            return;
        }

        var validity = await _waferMap.GetValidityAsync();

        TextFieldText = validity.InvalidGridDimensions.ToString();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _waferMap!.SetDataAsync(DiesTable);
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ShowCurrentDie(WaferMapHoverDieChangedEventArgs e)
    {
        if (_waferMap == null)
        {
            return;
        }

        var currentDie = e.CurrentDie;

        TextFieldText = currentDie?.Index.ToString();

    }
}
